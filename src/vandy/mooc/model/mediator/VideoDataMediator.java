package vandy.mooc.model.mediator;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.io.IOUtils;

import retrofit.RestAdapter;
import retrofit.client.Response;
import retrofit.mime.TypedFile;

import vandy.mooc.model.mediator.webdata.Video;
import vandy.mooc.model.mediator.webdata.VideoServiceProxy;
import vandy.mooc.model.mediator.webdata.VideoStatus;
import vandy.mooc.model.mediator.webdata.VideoStatus.VideoState;
import vandy.mooc.provider.ContentProviderHelper;
import vandy.mooc.provider.VideoMeta;
import vandy.mooc.utils.Constants;
import vandy.mooc.utils.VideoMediaStoreUtils;
import vandy.mooc.utils.VideoStorageUtils;
import android.content.Context;
import android.net.Uri;
import android.util.Log;

/**
 * Mediates communication between the Video Service and the local storage on the
 * Android device. The methods in this class block, so they should be called
 * from a background thread (e.g., via an AsyncTask).
 */
public class VideoDataMediator {

	private static final String TAG = VideoDataMediator.class.getSimpleName();
	/**
	 * Status code to indicate that file is successfully uploaded.
	 */
	public static final String STATUS_UPLOAD_SUCCESSFUL = "Upload succeeded";

	/**
	 * Status code to indicate that file is successfully downloaded.
	 */
	public static final String STATUS_DOWNLOAD_SUCCESSFUL = "Download succeeded";

	/**
	 * Status code to indicate that rating has been updated.
	 */
	public static final String STATUS_RATING_SUCCESSFUL = "Rating changed";
	
	/**
	 * Status code to indicate that file upload failed due to large video size.
	 */
	public static final String STATUS_UPLOAD_ERROR_FILE_TOO_LARGE = "Upload failed: File too big";

	/**
	 * Status code to indicate that file upload failed.
	 */
	public static final String STATUS_UPLOAD_ERROR = "Upload failed";

	/**
	 * Status code to indicate that rating update failed.
	 */
	public static final String STATUS_RATING_ERROR = "Rating update failed";
	
	/**
	 * Status code to indicate that file upload failed.
	 */
	public static final String STATUS_DOWNLOAD_ERROR = "Download failed";

	/**
	 * Defines methods that communicate with the Video Service.
	 */
	private VideoServiceProxy mVideoServiceProxy;

	/**
	 * Constructor that initializes the VideoDataMediator.
	 * 
	 * @param context
	 */
	public VideoDataMediator() {
		// Initialize the VideoServiceProxy.
		mVideoServiceProxy = new RestAdapter.Builder().setEndpoint(Constants.SERVER_URL).build()
				.create(VideoServiceProxy.class);
	}

	public String addRating(Context context, Long id, Integer rating){
		ContentProviderHelper mCPH = new ContentProviderHelper(context);	
		VideoMeta meta = mCPH.get(id);
		try{
			Double averageRating = mVideoServiceProxy.addRating(id, rating);
			meta.setRating(averageRating);
			
			Log.i(TAG, "putting video into cp with title " + meta.getTitle() + " and rating " + averageRating);
			mCPH.put(meta.getTitle(), meta);
			mCPH.update(meta.getTitle(), meta);
			// TODO Yeah, I know this is ugly.  I want to insert or update, but this will have to do for now.
			
		} catch (Exception e) {		
			return STATUS_RATING_ERROR;
		}
		
		return STATUS_RATING_SUCCESSFUL;
	}
	
	/**
	 * Uploads the Video having the given Id. This Id is the Id of Video in
	 * Android Video Content Provider.
	 * 
	 * @param videoId
	 *            Id of the Video to be uploaded.
	 *
	 * @return A String indicating the status of the video upload operation.
	 */
	public String uploadVideo(Context context, Uri videoUri) {

		ContentProviderHelper mCPH = new ContentProviderHelper(context);

		// Get the path of video file from videoUri.
		String filePath = VideoMediaStoreUtils.getPath(context, videoUri);

		// Get the Video from Android Video Content Provider having
		// the given filePath.
		Video androidVideo = VideoMediaStoreUtils.getVideo(context, filePath);

		// Check if any such Video exists in Android Video Content
		// Provider.
		if (androidVideo != null) {
			// Prepare to Upload the Video data.

			// Create an instance of the file to upload.
			File videoFile = new File(filePath);

			// Check if the file size is less than the size of the
			// video that can be uploaded to the server.
			if (videoFile.length() < Constants.MAX_SIZE_MEGA_BYTE) {

				try {
					// Add the metadata of the Video to the Video Service
					// and get the resulting Video that contains
					// additional meta-data (e.g., Id and ContentType)
					// generated by the Video Service.
					Video receivedVideo = mVideoServiceProxy.addVideo(androidVideo);

					// TODO Remove the rating once you've changed the server.
					VideoMeta meta = new VideoMeta(receivedVideo, filePath, 0);
				//	VideoMeta meta = new VideoMeta(receivedVideo, videoUri.toString(), 0);

					Log.i(TAG, "putting video into cp with title " + meta.getTitle());
					mCPH.put(meta.getTitle(), meta);
					mCPH.update(meta.getTitle(), meta);
					// TODO Yeah, I know this is ugly.  I want to insert or update, but this will have to do for now.
					

					// Check if the Server returns any Video metadata.
					if (receivedVideo != null) {

						// Finally, upload the Video data to the server
						// and get the status of the uploaded video data.
						VideoStatus status = mVideoServiceProxy.setVideoData(receivedVideo.getId(),
								new TypedFile(receivedVideo.getContentType(), videoFile));

						// Check if the Status of the Video or not.
						if (status.getState() == VideoState.READY) {
							// Video successfully uploaded.
							return STATUS_UPLOAD_SUCCESSFUL;
						}
					}
				} catch (Exception e) {
					// Error occured while uploading the video.
					return STATUS_UPLOAD_ERROR;
				}
			} else
				// Video can't be uploaded due to large video size.
				return STATUS_UPLOAD_ERROR_FILE_TOO_LARGE;
		}

		// Error occured while uploading the video.
		return STATUS_UPLOAD_ERROR;
	}

	/**
	 * Uploads the Video having the given Id. This Id is the Id of Video in
	 * Android Video Content Provider.
	 * 
	 * @param videoId
	 *            Id of the Video to be uploaded.
	 *
	 * @return A String indicating the status of the video upload operation.
	 */
	public String downloadVideo(Context context, Long id) {
		Log.i(TAG, "Starting download of video " + id);
		ContentProviderHelper mCPH = new ContentProviderHelper(context);
		VideoMeta meta = mCPH.get(id);
		try {
			
			// TODO Deal with the situation where there's no meta data in the client.
			// Either by passing the data into this method or adding another method
			// to the server that gives you the metadata if you pass it an id.
			Response response = mVideoServiceProxy.getData(id);
			if (200 == response.getStatus()) {
				File file = VideoStorageUtils.storeVideoInExternalDirectory(context, response, meta.getTitle());
				Log.i(TAG, "Saving downloaded video at " + file.getAbsolutePath());
			
				meta.setLocalPath(file.getAbsolutePath());
				mCPH.put(meta.getTitle(), meta);
				mCPH.update(meta.getTitle(), meta);
				// TODO Yeah, I know this is ugly.  I want to insert or update, but this will have to do for now.
				
				return STATUS_DOWNLOAD_SUCCESSFUL;
			} else {
				Log.i(TAG, "the server returned " + response.getStatus());
				return STATUS_DOWNLOAD_ERROR;
			}

		} catch (Exception e) {
			// Error occured while uploading the video.
			Log.i(TAG, "download error", e);
			return STATUS_DOWNLOAD_ERROR;
		}

	}

	/**
	 * Get the List of Videos from Video Service.
	 *
	 * @return the List of Videos from Server or null if there is failure in
	 *         getting the Videos.
	 */
	public List<Video> getVideoList() {
		try {
			return (ArrayList<Video>) mVideoServiceProxy.getVideoList();
		} catch (Exception e) {
			return null;
		}
	}
}
